{"version":3,"sources":["components/Contact/Contact.module.scss","components/Contact/Contact.js"],"names":["module","exports","Contact","state","contactForm","name","elementType","elementConfig","type","placeholder","autocomplete","value","validation","required","minLength","maxLength","valid","touched","email","isEmail","message","formIsValid","loading","contactFormTitle","inputChangedHandler","event","inputIdentifier","updatedContactForm","Object","_home_agon_html_css_javascript_odin_javascript_meteoup_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_this","updatedFormElement","target","checkValidity","setState","handleContactFormSubmit","preventDefault","database","ref","push","keys","forEach","elem","vaid","rules","isValid","trim","length","test","_this2","this","formElementsArray","key","id","config","form","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","map","formElement","_UI_Input_Input__WEBPACK_IMPORTED_MODULE_7__","invalid","shouldValidate","changed","antd__WEBPACK_IMPORTED_MODULE_8__","ghost","disabled","onClick","e","_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_9__","className","classes","Component"],"mappings":"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","file":"static/js/6.a3e4a054.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contact\":\"Contact_Contact__3ogl2\"};","import React, { Component } from \"react\";\nimport Input from \"../UI/Input/Input\";\nimport { Button } from \"antd\";\nimport Spinner from \"../UI/Spinner/Spinner\";\nimport { database } from \"../../config/fire\";\nimport classes from \"./Contact.module.scss\";\n\nclass Contact extends Component {\n  state = {\n    contactForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"name\",\n          placeholder: \"Name\",\n          autocomplete: \"nope\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 2,\n          maxLength: 20\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Your email\",\n          autocomplete: \"nope\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      message: {\n        elementType: \"textarea\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Place your message here\",\n          autocomplete: \"nope\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    formIsValid: false,\n    loading: false,\n    contactFormTitle: \"Send us a Message\"\n  };\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      //for select elements\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedContactForm = {\n      ...this.state.contactForm\n    };\n\n    const updatedFormElement = {\n      ...updatedContactForm[inputIdentifier]\n    };\n\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = this.checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n    updatedFormElement.touched = true;\n    updatedContactForm[inputIdentifier] = updatedFormElement;\n\n    let formIsValid = true;\n    for (let inputIdentifier in updatedContactForm) {\n      //check if all inputs are valid in the form\n\n      formIsValid = updatedContactForm[inputIdentifier].valid && formIsValid;\n    }\n    this.setState({\n      contactForm: updatedContactForm,\n      formIsValid: formIsValid\n    });\n  };\n\n  handleContactFormSubmit = event => {\n    event.preventDefault();\n\n    const { contactForm } = { ...this.state };\n\n    database.ref(\"/contact\").push({\n      name: contactForm.name.value,\n      email: contactForm.email.value,\n      message: contactForm.message.value\n    });\n\n    Object.keys(contactForm).forEach(elem => {\n      contactForm[elem].value = \"\";\n      contactForm[elem].touched = false;\n      contactForm[elem].vaid = false;\n    });\n    this.setState({\n      contactFormTitle: \"Thank You for contacting us, we'll get back to you\",\n      formIsValid: false\n    });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.contactForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.contactForm[key]\n      });\n    }\n    let form = (\n      <form>\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={event => this.inputChangedHandler(event, formElement.id)}\n          />\n        ))}\n        <Button\n          type=\"primary\"\n          ghost\n          disabled={!this.state.formIsValid}\n          onClick={e => this.handleContactFormSubmit(e)}\n        >\n          Submit\n        </Button>\n      </form>\n    );\n    if (this.state.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.Contact}>\n        <h3>{this.state.contactFormTitle}</h3>\n        {form}\n      </div>\n    );\n  }\n}\n\nexport default Contact;\n"],"sourceRoot":""}